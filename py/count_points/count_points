#!/usr/bin/python

import prettytable
from datetime import datetime
from jira import JIRA

def load_credentials():
    fp = open('.credentials', 'r+')
    lines = fp.readlines()
    fp.close()
    if len(lines) < 2:
        return []
    return [line.rstrip('\n') for line in lines]



def get_sprint_ids(board_ids, last_sprints_count=1):
    sprint_ids = {}
    for b in board_ids:
        sprint_ids[b] = []
        json_answer = jira._get_json('',  base='http://hercules:8080/rest/agile/1.0/board/' + str(b) + '/sprint')
        if json_answer.has_key('values'):
            for i in range(-1, -last_sprints_count - 1, -1):
                sprint_ids[b].append(json_answer['values'][i]['id'])
    return sprint_ids


def get_story_points(board_id, sprint_id):
    json_issues_in_sprint = jira._get_json('rapid/charts/sprintreport?rapidViewId=%s&sprintId=%s' % (board_id, sprint_id), base=jira.AGILE_BASE_URL)

    type_issues = [ 'completedIssues', 'incompletedIssues', 'issuesNotCompletedInCurrentSprint', 'issuesCompletedInAnotherSprint', 'puntedIssues']
    #type_issues = [ 'completedIssues', 'incompletedIssues', 'puntedIssues']

    issues_in_sprint = []

    completed_points = 0
    total_points = 0
    #print '----------------------- ' + str(sprint_id)
    #print json_issues_in_sprint['contents']
    for t in type_issues:
        if t in json_issues_in_sprint['contents']:
            #print t
            for raw_issues in json_issues_in_sprint['contents'][t]:
                try:
                    i = jira.issue(raw_issues['key'])
                    p = i.fields.customfield_10002
                    #print raw_issues['key'] + ': ' +  str(p)
                    total_points += p
                    if t == 'completedIssues' or t == 'issuesCompletedInAnotherSprint':
                        completed_points += p
                except:
                    continue
    say_do_map = {'say': total_points,
                 'do': completed_points}
    print say_do_map
    return say_do_map


def get_board_map():
    boards_map = {}
    boards = jira.boards()
    for b in boards:
        boards_map[b.id] = b.name
    return boards_map

cred = load_credentials()
jira = JIRA('http://hercules:8080',basic_auth=(cred[0], cred[1]))
#board_ids = [108, 103, 102, 100, 104, 136, 118]
board_ids = [118]
board_map = get_board_map()
sprint_count = 8
sprint_ids = get_sprint_ids(board_ids, sprint_count)
for b in sprint_ids:
    print '\nPoints for board ' + str(board_map[b])
    x = prettytable.PrettyTable()
    x.add_column('', ['say', 'do', 'say_do'])
    i = -1
    for s in sprint_ids[b]:
        say_do_map = get_story_points(b, s)
        col = []
        col.append(str(say_do_map['say']))
        col.append(str(say_do_map['do']))
        col.append('%.2f %%' % (float(say_do_map['do'])/float(1 if say_do_map['say'] == 0 else say_do_map['say']) * 100))
        x.add_column('sprint ' + str(i), col)
        i = i - 1
        #print 'Say: ' + str(say_do_map['say'])
        #print 'Do: ' + str(say_do_map['do'])
        #print 'Say/Do: %.2f %%' % (float(say_do_map['do'])/float(1 if say_do_map['say'] == 0 else say_do_map['say']) * 100)
    print x


print '\nUpdated in ' + str(datetime.now())
